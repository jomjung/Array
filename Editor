import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.lang.String;
public class Main {
    static class Node { // Node라는 클래스 생성.
        Node prev;
        Object data;
        Node next;
        Node( Object D) { //생성자...
            prev = null;
            data = D;
            next = null;
        }
    }
    static Node tail = new Node("");
    static Node head = new Node("");
    public static void main(String[] args) throws IOException{
        int index = 0;
        int size = 0;
        BufferedReader sc = new BufferedReader(new InputStreamReader(System.in));
        String word = sc.readLine();
        Node node = new Node("");
        for (int i = 0; i < word.length(); i++) { //처음에 단어들 리스트에 추가
            Node n = new Node(word.charAt(i));
            if (size == 0) {
                node.data = word.charAt(i);
                node.next = head;
                head.prev = node;
                head = node;
                size++; index++;
                tail = head;
            } else {
                tail.next = n;
                n.prev = tail;
                tail = n;
                node = n;
                size++; index++;
            }
        }
        tail.next = null; head.prev = null;

        int n = Integer.parseInt(sc.readLine());
        for (int i=0;i<n;i++){
            String command = sc.readLine();
            String[] cmd = command.split(" ");

            if (cmd[0].equals("P")){ //커서 왼쪽에 문자추가 (index번째)
                if (size == 0){
                    node.data = head.data = tail.data = cmd[1];
                } else if (index == 0){ //맨 앞에 문자추가
                    Node nd = new Node(cmd[1]);
                    nd.next = head;
                    head.prev = nd;
                    head = nd;
                    tail.next = null; head.prev = null;
                    node = nd;
                } else if (index == size) { //맨 끝에 문자추가. 이거 이상함
                    Node nd = new Node(cmd[1]);
                    tail.next = nd;
                    nd.prev = tail;
                    tail = nd;
                    tail.next = null;
                    node = tail;
                } else {
                    Node temp1 = new Node(cmd[1]);  //node(index)생성. temp의 노드는 index-1
                    temp1.next = node.next;
                    node.next = temp1;
                    temp1.prev = node;
                    temp1.next.prev = temp1;
                    node = temp1;
                }
                index++; size++;
            }
            else if (cmd[0].equals("L")){ //index 감소
                if (index == 1){ //index가 0일 경우 앞에 의미없는거 만들어두기.
                    Node front = new Node(node.data);
                    front.next = node;
                    node.prev = front;
                    node = front;
                    index--;
                } else if (index > 0) {
                    index--;
                    node = node.prev;
                }
            }
            else if (cmd[0].equals("D")){ //index 증가
                if (index == 0){
                    if (size>0){
                        node = node.next;
                        node.prev = null;
                        index++;
                    }
                } else if (index < size) {
                    index++;
                    node = node.next;
                }
            }
            else if (cmd[0].equals("B")){ //커서 왼쪽문자 지우기 node(index-1) 지우기
                if (index > 0){
                    if (index == 1) {
                        if (size > 1) {
                            head = head.next;
                            head.prev = null;
                        } else if (size == 1) {
                            head = tail;
                            head.data = tail.data = node.data = null;
                            node = head;
                        }
                    } else if (index > 1){
                        if (node == tail){
                            tail = node.prev;
                            node = node.prev;
                            tail.next = null;
                        }else{
                            Node temp = node.prev;
                            temp.next = node.next;
                            temp.next.prev = temp;
                            node = temp;
                        }
                    }
                    index--;
                    size--;
                }
            }
        }
        Node nd = head;
        while (nd != tail || nd.next!= null) {
            if (nd != null){
                System.out.print(nd.data);
                nd = nd.next;
            }
        } if ( tail.data != null ) System.out.print(tail.data);
    }
}
